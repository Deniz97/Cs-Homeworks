#input generator for THE2, prints 800 example inputs in total

from random import randint
from random import uniform
from tri_output_the2 import physics
from math import *
#your physics function expected to return 3 values in 3 case as follows:
 #["stabil",x1,x2]
 #["towardsm1"x1,x2]
 #["towardsm2"x1,x2]

anan = [1]*10
inputs = []
outputs = []
print "200 example of T1=0"
bom = 0
while bom<200:
	anan =[uniform(1,80) #ang1
		,uniform(1,80) #ang2
		,uniform(1,30) #d
		,uniform(0.05,2) #sfric
		,uniform(0.05,2) #kfric
		,uniform(1,10) #s
		,uniform(1,8) #m1
		,uniform(1,8) #m2
		,0 #t1
		,uniform(0.1,5) #t2
		] 
	d1 = anan[2]*sin(radians(anan[1])) / sin(pi-radians(anan[1])-radians(anan[0]))
	d2 = anan[2]*sin(radians(anan[0])) / sin(pi-radians(anan[1])-radians(anan[0]))
	if anan[4]<anan[3] and d1 > (anan[5]+0.15) and d2>(anan[5]+0.15):
		inputs.append(anan)
		outputs.append(physics(anan)[1:3])
		bom += 1

ans = []
print "200 examples of system doesnt move until t1"
bom=0
while (bom<200):
	anan =[uniform(1,80) #ang1
		,uniform(1,80) #ang2
		,uniform(1,30) #d
		,uniform(0.05,1.5) #sfric
		,uniform(0.05,1.5) #kfric
		,uniform(1,10) #s
		,uniform(1,8) #m1
		,uniform(1,8) #m2
		,uniform(0.1,5) #t1
		,uniform(0.1,5) #t2
		] 
	d1 = anan[2]*sin(radians(anan[1])) / sin(pi-radians(anan[1])-radians(anan[0]))
	d2 = anan[2]*sin(radians(anan[0])) / sin(pi-radians(anan[1])-radians(anan[0]))
	if anan[4]<anan[3] and d1 > (anan[5]+0.15) and d2>(anan[5]+0.15):
		ans = physics(anan[::])
		if ans[0] == "stabil":
			inputs.append(anan)
			outputs.append(ans[1:3])
			bom += 1

ans = []
print "200 examples of system moves toward m1"
bom=0
while (bom<200):
	anan =[uniform(1,80) #ang1
		,uniform(1,80) #ang2
		,uniform(1,30) #d
		,uniform(0.05,1.5) #sfric
		,uniform(0.05,1.5) #kfric
		,uniform(1,10) #s
		,uniform(1,8) #m1
		,uniform(1,8) #m2
		,uniform(0.1,5) #t1
		,uniform(0.1,5) #t2
		] 
	d1 = anan[2]*sin(radians(anan[1])) / sin(pi-radians(anan[1])-radians(anan[0]))
	d2 = anan[2]*sin(radians(anan[0])) / sin(pi-radians(anan[1])-radians(anan[0]))
	if anan[4]<anan[3] and d1 > (anan[5]+0.15) and d2>(anan[5]+0.15):
		ans = physics(anan[::])
		if ans[0] == "towardsm1":
			inputs.append(anan)
			outputs.append(ans[1:3])
			bom += 1

ans = []
print "200 examples of system moves toward m2"
bom=0
while (bom<200):
	anan =[uniform(1,80) #ang1
		,uniform(1,80) #ang2
		,uniform(1,30) #d
		,uniform(0.05,1.5) #sfric
		,uniform(0.05,1.5) #kfric
		,uniform(1,10) #s
		,uniform(1,8) #m1
		,uniform(1,8) #m2
		,uniform(0.1,5) #t1
		,uniform(0.1,5) #t2
		] 
	d1 = anan[2]*sin(radians(anan[1])) / sin(pi-radians(anan[1])-radians(anan[0]))
	d2 = anan[2]*sin(radians(anan[0])) / sin(pi-radians(anan[1])-radians(anan[0]))
	if anan[4]<anan[3] and d1 > (anan[5]+0.15) and d2>(anan[5]+0.15):
		ans = physics(anan[::])
		if ans[0] == "towardsm2":
			inputs.append(anan)
			outputs.append(physics(anan)[1:3])
			bom += 1
print "inputs = ",inputs
print "outputs= ",outputs


